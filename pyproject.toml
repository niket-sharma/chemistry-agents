[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "chemistry-agents"
version = "0.1.0"
description = "AI-powered molecular property prediction and chemical engineering unit operations framework"
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
authors = [
    {name = "Niket Sharma", email = "niket.sharma@example.com"}
]
maintainers = [
    {name = "Niket Sharma", email = "niket.sharma@example.com"}
]
keywords = [
    "chemistry", 
    "molecular-property-prediction", 
    "drug-discovery", 
    "cheminformatics", 
    "machine-learning", 
    "deep-learning", 
    "transformers", 
    "graph-neural-networks", 
    "pytorch", 
    "rdkit",
    "chemical-engineering",
    "unit-operations",
    "distillation",
    "heat-exchangers",
    "reactors",
    "separation-processes"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "torch==2.4.0",
    "numpy==1.26.4",
    "pandas==2.2.2",
    "scikit-learn==1.5.1",
    "rdkit==2024.3.3",
    "transformers==4.44.0",
    "tqdm==4.66.5",
    "matplotlib==3.9.2",
    "seaborn==0.13.2",
    "scipy==1.14.0",
    "pyyaml==6.0.2",
]

[project.optional-dependencies]
gpu = [
    "cupy>=10.6.0",
    "torch-geometric>=2.0.0"
]
visualization = [
    "py3Dmol>=1.8.0",
    "nglview>=3.0.0",
    "plotly>=5.0.0",
    "ipywidgets>=7.6.0"
]
notebooks = [
    "jupyter>=1.0.0",
    "jupyterlab>=3.4.0",
    "ipython>=8.0.0"
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=3.0.0",
    "black>=22.0.0",
    "flake8>=4.0.0",
    "isort>=5.10.0",
    "mypy>=0.961",
    "pre-commit>=2.19.0"
]
api = [
    "fastapi>=0.78.0",
    "uvicorn>=0.18.0",
    "streamlit>=1.11.0"
]
cloud = [
    "boto3>=1.24.0",
    "google-cloud-storage>=2.4.0",
    "azure-storage-blob>=12.12.0"
]
experiment_tracking = [
    "wandb>=0.12.0",
    "mlflow>=1.27.0",
    "tensorboard>=2.9.0"
]
all = [
    "chemistry-agents[gpu,visualization,notebooks,dev,api,cloud,experiment_tracking]"
]

[project.urls]
Homepage = "https://github.com/niket-sharma/CHEMISTRY-AGENTS"
Documentation = "https://github.com/niket-sharma/CHEMISTRY-AGENTS#readme"
Repository = "https://github.com/niket-sharma/CHEMISTRY-AGENTS.git"
"Bug Tracker" = "https://github.com/niket-sharma/CHEMISTRY-AGENTS/issues"
Changelog = "https://github.com/niket-sharma/CHEMISTRY-AGENTS/blob/main/CHANGELOG.md"

[project.scripts]
chemistry-agents-train = "chemistry_agents.scripts.train_model:main"
chemistry-agents-finetune = "chemistry_agents.scripts.fine_tune_transformer:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
chemistry_agents = [
    "configs/*.json",
    "data/*.csv",
    "models/*.pt"
]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "rdkit.*",
    "torch_geometric.*",
    "transformers.*",
    "sklearn.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "py3Dmol.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]